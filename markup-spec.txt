Markup is text markup language primarily useful for prose documents such as books and articles
It is designed to be editable in plain text editor (at least to extent that Emacs can be considered plain text editor) and to allow for arbitrary logical markup
grammar of Markup file is defined in terms of mapping to abstract syntax tree which can then be rendered into number of formats, e.g. HTML, PDF, TeX, RTF, etc.
Markup files consist of Unicode text encoded in UTF-8
Lines can be terminated with carriage return (U+000D), carriage-return/line-feed (U+000D U+000A), or line feed (U+000A)
Tab characters (U+0009) are equivalent to eight spaces
blank line (which has syntactic meaning to be described later) is defined as two consecutive end-of-line sequences possibly with white space between them
Trailing white space has no meaning in Markup and do not need to be preserved by Markup processor
basic syntax is similar to Markdown and reStructuredText with bit of TeX thrown in for good measure
As mentioned above, Markup grammar defines mapping between Markup document and abstract syntax tree
tree is built out of tagged elements and strings
Markup was originally developed in Lisp where obvious representation for Markup document is as s-expressions, with each tree represented by list whose first element is symbol indicating tree’s tag
This kind of tree structure also has obvious representation in XML or HTML
abstract syntax tree is rooted in single element whose tag is `body`
Its children are elements described below
element names were, as will be obvious to anyone who knows HTML, chosen so that trivial mapping from Markup to HTML gives useful result but other than that pleasant coincidence, Markup defines no particular semantics for Markup documents
Normal paragraphs are simply blocks of text separated by one or more blank lines
They can contain single line breaks, which are converted to spaces during parsing
body of paragraph can contain tagged markup as discussed below
tag of paragraph node is `p`
Headers are paragraphs marked as in Emacs outline-mode, with leading `*`s followed by single space
more stars lower in hierarchy header
content of header is everything after `*` and space and is otherwise parsed just like paragraph
Header nodes are tagged with `hn` where n is number of stars
Block quotes are one of three kinds of “sections” indicated by indentation
section ends at end of file or by occurrence of less-indented non-blank line
Sections can also be nested
block quote is demarcated by two spaces of indentation relative to enclosing section and can contain their own paragraphs, headers, lists, and verbatim sections
Block quote nodes are tagged with `blockquote`
Verbatim sections are indented three spaces relative to enclosing section
Within verbatim section all text is captured exactly as is
Verbatim sections are tagged with `pre`
Lists are demarcated by two spaces of indentation followed by list marker, either `#` for ordered (i.e. numbered) list or `-` for unordered (i.e. bulleted) list
ordered list is tagged with `ol` and unordered list with `ul`
list marker must be followed by space and then text of first list item
List items are tagged with `li` and can contain multiple paragraphs, contents of which are indented to line up under first character of beginning of list item
Subsequent items are marked with another list marker in same column as original list marker and another space
Markup processor can optionally support few bits of syntax to make it more convenient to add hyperlinks to document
Within normal text (i.e. anywhere but verbatim section) link can be indicated by enclosing text to act as hyperlink with `[]`s
This maps to element tagged `link`
If text between `[]`s includes `|`, text after `|` is wrapped in `key` element
paragraph consisting solely of text in `[]`s followed by zero or more spaces followed by text enclosed in `<>`s is parsed as element tagged `link_def` whose two children are `link` element comprising text between `[]`s and `url` element comprising text between `<>`s
idea is that Markup backend would render all in-text `link` elements as hyperlinks with `link` text linking to URL given in corresponding `link_def` element
given Markup processor can choose to implement link syntax or not and, if it does, may provide way to indicate whether or not it should be used when parsing given document
For all other markup, Markup uses TeX-like notation `\tagname{stuff}`
Tag names can consist of letters, numbers, `-`, `.`, and `+`
Tagged markup can nest so you can have:
   \i{italic with \b{some bold added} and back to just italic}
element created from tagged markup is tagged with tagname
Certain tag names can be used to mark sub-documents which are parsed differently than simple spans of text
content of sub-document—between opening and closing {}s—is parsed like document so it will contain at least one paragraph and can contain headers, block quotes, lists, verbatim sections, and even nested sub-documents
Footnotes, for example, are commonly set up to be parsed as sub-documents
Note that blank line separating paragraphs of sub-document has no effect on enclosing paragraph
If sub-document is embedded in paragraph that is part of indented section (i.e. block quote or list) then subsequent lines of sub-document should be indented same as enclosing paragraph:
Markup processor will need to provide some more or less convenient way to specify that certain tag names should be parsed as sub-documents rather than character markup
Outside of verbatim sections, backslash can escape any character that is not legal tag name character, stripping it of its syntactic significance
characters `\`, `{`, and `}` must be escaped whenever they appear outside verbatim section if they are to be part of text
Other non-tag-name characters may be escaped anytime, but it is only necessary when they would otherwise have syntactic significance
For example, `*` does not need to be escaped except at beginning of paragraph, where it would otherwise mark paragraph as header
In real world, Markup documents are often (usually) edited in Emacs
Emacs has mechanism whereby line starting with `-*-` indicates \i{mode line} which tells emacs about how to edit file
For instance, in Markup sources of this specification, first line is:
   -*- mode: markup; -*-
Markup parser can choose to strip such modelines at top level of document to save having to strip them out later in processing
complete Markup system consists of parser that can parse text file in Markup syntax into data structure representing resulting abstract syntax tree and one or more back-ends that can render such tree into some other form
For purposes of testing we specify trivial mapping from Markup abstract tree to well-formed XML: each Markup element is mapped to XML element with same name and with node children mapped to XML in same way and string children as text
